apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    testBuildType "debug"

    defaultConfig {
        applicationId "com.androidkotlincore.androidkotlincoresample"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        vectorDrawables.useSupportLibrary = true

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = 2
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode 15

        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }
    kotlin { experimental { coroutines 'enable' } }
    signingConfigs {
        debug {
            storeFile file("../keystore/key.jks")
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
        release {
            storeFile file("../keystore/key.jks")
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            multiDexEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
            multiDexEnabled = true
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        println("Iterating variant: " + variant.getName())
        switch (variant.getName()) {
            case 'release':
                variant.buildConfigField "String", "DB_NAME", "\"${globalConfiguration['databaseNameRelease']}\""
                break
            case 'debug':
                variant.buildConfigField "String", "DB_NAME", "\"${globalConfiguration['databaseNameDev']}\""
                break
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //modules
    implementation deps.entityconverter

    //support
    implementation deps.support.appcompat
    implementation deps.support.design
    implementation deps.support.cardview
    implementation deps.support.annotations
    implementation deps.support.recyclerview
    implementation deps.support.constraintLayout

    //rx
//    implementation deps.rx.android
//    implementation deps.rx.java

    //coroutines
    implementation deps.coroutines.core
    implementation deps.coroutines.android
//    implementation deps.coroutines.rx

    //kotlin
    implementation deps.kotlin.stdlib
}
